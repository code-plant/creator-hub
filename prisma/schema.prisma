datasource db {
  provider = "postgresql"
  url      = env("PRISMA_DB_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  user
  admin
}

model User {
  id         String    @id @default(uuid()) @db.Uuid
  role       UserRole
  // can be null if the user is deleted
  nameI18n   String?
  holderId   String    @unique @db.Uuid
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  tosVersion Int
  deletedAt  DateTime?

  holder                Holder                     @relation(fields: [holderId], references: [id])
  authenticationMethods UserAuthenticationMethod[]
  emails                UserEmailRc[]
  oauth2Accounts        UserOauth2AccountRc[]
}

// email referenced by UserAuthenticationStep
model UserEmailRc {
  id             String    @id @default(uuid()) @db.Uuid
  userId         String    @db.Uuid
  email          String    @unique
  verifiedAt     DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  referenceCount Int

  user User @relation(fields: [userId], references: [id])
}

// OAuth2 account referenced by UserAuthenticationStep
model UserOauth2AccountRc {
  id                String   @id @default(uuid()) @db.Uuid
  userId            String   @db.Uuid
  provider          String
  providerAccountId String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  referenceCount    Int

  user User @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

enum UserAuthenticationMethodTag {
  primary
  backup
}

model UserAuthenticationMethod {
  id        String                       @id @default(uuid()) @db.Uuid
  tag       UserAuthenticationMethodTag?
  userId    String                       @db.Uuid
  createdAt DateTime                     @default(now())
  updatedAt DateTime                     @updatedAt

  user  User                     @relation(fields: [userId], references: [id])
  steps UserAuthenticationStep[]

  @@unique([userId, tag])
}

enum UserAuthenticationStepType {
  email
  password
  oauth2
}

model UserAuthenticationStep {
  id        String                     @id @default(uuid()) @db.Uuid
  methodId  String                     @db.Uuid
  type      UserAuthenticationStepType
  createdAt DateTime                   @default(now())
  updatedAt DateTime                   @updatedAt
  order     Int
  data      String

  method UserAuthenticationMethod @relation(fields: [methodId], references: [id])

  @@unique([methodId, order])
}

enum HolderType {
  user
  merchant
}

model Holder {
  id   String     @id @default(uuid()) @db.Uuid
  type HolderType

  user     User?
  merchant Merchant?
}

model Merchant {
  id        String   @id @default(uuid()) @db.Uuid
  nameI18n  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  holderId  String   @unique @db.Uuid

  holder Holder @relation(fields: [holderId], references: [id])
}
